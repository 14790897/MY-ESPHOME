esphome:
  name: envpanel-espnow
  friendly_name: "环境面板-ESP-NOW接收端"

# 选用带 8MB Flash + 8MB PSRAM 的 S3 板卡变体
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
  flash_size: 8MB

# WiFi配置 - ESP-NOW可以与WiFi同时使用
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "EnvPanel-ESP-NOW"
    password: "12345678"

# HA API / OTA / Web
api:

ota:
  platform: esphome
# 深度睡眠配置
deep_sleep:
  id: deep_sleep_control

# 日志配置
logger:
  level: DEBUG
  logs:
    espnow: DEBUG

# Web服务器
web_server:
  port: 80
  auth:
    username: admin
    password: !secret wifi_password

# 全局变量存储接收到的传感器数据
globals:
  - id: received_temperature
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: received_humidity
    type: float  
    restore_value: false
    initial_value: '0.0'
    
  - id: received_pressure
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: last_update_time
    type: unsigned long
    restore_value: false
    initial_value: '0'

# ESP-NOW 配置 - 接收端
espnow:
  id: espnow_hub
  channel: 1
  on_receive:
    then:
      - lambda: |-
          ESP_LOGD("espnow", "Received ESP-NOW data");
          
          // 解析接收到的数据 (固定12字节数据包)
          // 温度(4字节) + 湿度(4字节) + 气压(4字节)
          float temp, hum, press;
          memcpy(&temp, data, 4);
          memcpy(&hum, data + 4, 4);  
          memcpy(&press, data + 8, 4);
          
          id(received_temperature) = temp;
          id(received_humidity) = hum;
          id(received_pressure) = press;
          id(last_update_time) = millis();
          
          ESP_LOGI("espnow", "收到数据: 温度=%.1f°C, 湿度=%.1f%%, 气压=%.1fhPa", temp, hum, press);
          
          // 更新传感器状态
          id(espnow_temperature).publish_state(temp);
          id(espnow_humidity).publish_state(hum);
          id(espnow_pressure).publish_state(press);

# 引入ESP-NOW专用显示配置
packages:
  display9341: !include display9341-espnow.yaml

# 传感器定义 - 基于ESP-NOW接收的数据
sensor:
  # ESP-NOW接收的传感器数据
  - platform: template
    name: "ESP-NOW Temperature"
    id: espnow_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    lambda: 'return id(received_temperature);'
    
  - platform: template
    name: "ESP-NOW Humidity"
    id: espnow_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 1
    device_class: humidity
    state_class: measurement
    lambda: 'return id(received_humidity);'
    
  - platform: template
    name: "ESP-NOW Pressure"
    id: espnow_pressure
    unit_of_measurement: "hPa"
    accuracy_decimals: 1
    device_class: pressure
    state_class: measurement
    lambda: 'return id(received_pressure);'

  # 数据新鲜度检查传感器
  - platform: template
    name: "Data Age"
    id: data_age
    unit_of_measurement: "s"
    accuracy_decimals: 0
    lambda: |-
      if (id(last_update_time) == 0) {
        return NAN;
      }
      return (millis() - id(last_update_time)) / 1000.0;
    update_interval: 10s

  # 系统运行时间
  - platform: uptime
    name: "Uptime"
    
  # WiFi信号强度
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

# 二进制传感器 - 数据状态指示
binary_sensor:
  - platform: template
    name: "ESP-NOW Data Fresh"
    id: data_fresh
    lambda: |-
      if (id(last_update_time) == 0) {
        return false;
      }
      // 如果超过10分钟没有收到数据，认为数据过期
      return (millis() - id(last_update_time)) < 600000;
    filters:
      - delayed_on: 1s
      - delayed_off: 5s

# 文本传感器
text_sensor:
  - platform: template
    name: "ESP-NOW Status"
    id: espnow_status
    lambda: |-
      if (id(last_update_time) == 0) {
        return std::string("等待数据");
      }
      unsigned long age = (millis() - id(last_update_time)) / 1000;
      if (age < 60) {
        return std::string("数据新鲜");
      } else if (age < 600) {
        return std::string("数据较旧 " + to_string(age) + "秒");
      } else {
        return std::string("数据过期");
      }
    update_interval: 5s

# 开关控制
switch:
  - platform: template
    name: "Deep Sleep Enable"
    id: deep_sleep_enable
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - deep_sleep.allow: deep_sleep_control
    turn_off_action:
      - deep_sleep.prevent: deep_sleep_control

# 状态LED指示
light:
  - platform: status_led
    name: "Status LED"
    pin: GPIO48  # ESP32-S3板载LED引脚，请根据实际板子调整