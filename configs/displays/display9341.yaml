# ========= ILI9341 显示屏（SPI） =========

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO2
#   miso_pin: GPIO3 # 如果没接，可以删掉
font:
  - file: "static/NotoSansSC-Regular.ttf"
    id: font_xs
    size: 12
    bpp: 1
    glyphs: !include glyphs.yaml
  - file: "static/NotoSansSC-Regular.ttf"
    id: font_s
    size: 16
    bpp: 1
    glyphs: !include glyphs.yaml
  - file: "static/NotoSansSC-Regular.ttf"
    id: font_m
    size: 20
    bpp: 2
    glyphs: !include glyphs.yaml
  - file: "static/NotoSansSC-Regular.ttf"
    id: font_l
    size: 24
    bpp: 2
    glyphs: !include glyphs.yaml


output:
  - platform: ledc
    pin: GPIO21
    id: lcd_bl_out
    frequency: 5000 Hz      # 可选，常用 1k~20kHz，避开可闻频率
    # channel: 0            # 可选；不写由 ESPHome 自动分配

light:
  - platform: monochromatic
    name: "LCD Backlight"
    id: lcd_backlight
    output: lcd_bl_out
    default_transition_length: 0s
    restore_mode: ALWAYS_ON  # 上电自动点亮（按需改）


display:
  - platform: ili9xxx
    model: TFT 2.4
    cs_pin: GPIO10
    dc_pin: GPIO18
    reset_pin: GPIO3
    rotation: 0
    invert_colors: false
    update_interval: 500ms
    lambda: |-
      it.fill(Color::BLACK);
      
      // 获取显示器尺寸
      int screen_width = it.get_width();
      int screen_height = it.get_height();
      
      // 自适应字体和间距
      auto title_font = id(font_l);
      auto section_font = id(font_s);
      auto data_font = id(font_m);
      auto time_font = id(font_xs);
      
      int line_spacing = 18;
      int section_spacing = 25;
      int margin = 8;
      
      // 如果屏幕较小，调整字体和间距
      if (screen_height < 240) {
        title_font = id(font_m);
        data_font = id(font_s);
        section_font = id(font_xs);
        line_spacing = 15;
        section_spacing = 20;
        margin = 5;
      }
      
      int y_pos = margin;
      
      // 显示标题
      it.print(margin, y_pos, title_font, Color::WHITE, "环境监测");
      y_pos += section_spacing + 5;
      
      // 显示温湿度传感器数据
      it.print(margin, y_pos, section_font, Color(200, 200, 200), "温湿度:");
      y_pos += line_spacing;
      
      // 显示温度 (理想范围: 18-26°C)
      if (id(aht20_temperature).has_state()) {
        auto temp = id(aht20_temperature).state;
        Color temp_color;
        if (temp < 16 || temp > 30) {
          temp_color = Color(255, 0, 0);  // 红色 - 超标
        } else if (temp < 18 || temp > 26) {
          temp_color = Color(255, 255, 0);  // 黄色 - 适中
        } else {
          temp_color = Color(0, 255, 0);  // 绿色 - 很好
        }
        it.printf(margin + 10, y_pos, data_font, temp_color, "温度: %.1f°C", temp);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "温度: --");
      }
      y_pos += line_spacing;
      
      // 显示湿度 (理想范围: 40-60%)
      if (id(aht20_humidity).has_state()) {
        auto humidity = id(aht20_humidity).state;
        Color humidity_color;
        if (humidity < 30 || humidity > 70) {
          humidity_color = Color(255, 0, 0);  // 红色 - 超标
        } else if (humidity < 40 || humidity > 60) {
          humidity_color = Color(255, 255, 0);  // 黄色 - 适中
        } else {
          humidity_color = Color(0, 255, 0);  // 绿色 - 很好
        }
        it.printf(margin + 10, y_pos, data_font, humidity_color, "湿度: %.1f%%", humidity);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "湿度: --");
      }
      y_pos += section_spacing;
      
      // 显示空气质量传感器数据
      it.print(margin, y_pos, section_font, Color(200, 200, 200), "空气质量:");
      y_pos += line_spacing;
      
      // 显示TVOC (标准: 优<0.3, 良0.3-0.6, 超标>0.6 mg/m³)
      if (id(voc_tvoc).has_state()) {
        auto tvoc = id(voc_tvoc).state;
        Color tvoc_color;
        if (tvoc > 0.6) {
          tvoc_color = Color(255, 0, 0);  // 红色 - 超标
        } else if (tvoc > 0.3) {
          tvoc_color = Color(255, 255, 0);  // 黄色 - 适中
        } else {
          tvoc_color = Color(0, 255, 0);  // 绿色 - 很好
        }
        
        // 自适应数值显示精度
        if (tvoc < 1.0) {
          it.printf(margin + 10, y_pos, data_font, tvoc_color, "TVOC: %.3f", tvoc);
        } else {
          it.printf(margin + 10, y_pos, data_font, tvoc_color, "TVOC: %.1f", tvoc);
        }
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "TVOC: --");
      }
      y_pos += line_spacing;
      
      // 显示甲醛 (标准: 优<0.05, 良0.05-0.1, 超标>0.1 mg/m³)
      if (id(voc_hcho).has_state()) {
        auto hcho = id(voc_hcho).state;
        Color hcho_color;
        if (hcho > 0.1) {
          hcho_color = Color(255, 0, 0);  // 红色 - 超标
        } else if (hcho > 0.05) {
          hcho_color = Color(255, 255, 0);  // 黄色 - 适中
        } else {
          hcho_color = Color(0, 255, 0);  // 绿色 - 很好
        }
        
        // 自适应数值显示精度
        if (hcho < 1.0) {
          it.printf(margin + 10, y_pos, data_font, hcho_color, "甲醛: %.3f", hcho);
        } else {
          it.printf(margin + 10, y_pos, data_font, hcho_color, "甲醛: %.1f", hcho);
        }
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "甲醛: --");
      }
      y_pos += line_spacing;
      
      // 显示CO2 (标准: 优<1.8, 良1.8-5.4, 超标>5.4 mg/m³)
      if (id(voc_co2).has_state()) {
        auto co2 = id(voc_co2).state;
        Color co2_color;
        if (co2 > 5.4) {
          co2_color = Color(255, 0, 0);  // 红色 - 超标
        } else if (co2 > 1.8) {
          co2_color = Color(255, 255, 0);  // 黄色 - 适中
        } else {
          co2_color = Color(0, 255, 0);  // 绿色 - 很好
        }
        
        // 自适应数值显示精度
        if (co2 < 10.0) {
          it.printf(margin + 10, y_pos, data_font, co2_color, "CO2: %.2f", co2);
        } else {
          it.printf(margin + 10, y_pos, data_font, co2_color, "CO2: %.0f", co2);
        }
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "CO2: --");
      }
      y_pos += section_spacing;
      
      // 显示天气预报信息
      it.print(margin, y_pos, section_font, Color(200, 200, 200), "天气预报:");
      y_pos += line_spacing;
      
      // 显示室外温度
      if (id(weather_temperature).has_state()) {
        auto outdoor_temp = id(weather_temperature).state;
        Color temp_color = Color(100, 200, 255);  // 浅蓝色表示室外
        it.printf(margin + 10, y_pos, data_font, temp_color, "室外: %.1f°C", outdoor_temp);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "室外: --°C");
      }
      y_pos += line_spacing;
      
      // 显示天气状况和湿度
      std::string weather_line = "";
      if (id(weather_condition).has_state()) {
        weather_line = id(weather_condition).state;
      }
      if (id(weather_humidity).has_state()) {
        if (!weather_line.empty()) {
          weather_line += " ";
        }
        char humidity_str[20];
        snprintf(humidity_str, sizeof(humidity_str), "%.0f%%", id(weather_humidity).state);
        weather_line += humidity_str;
      }
      
      if (!weather_line.empty()) {
        it.printf(margin + 10, y_pos, data_font, Color(150, 255, 150), "%s", weather_line.c_str());
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "天气: --");
      }
      
      // 显示时间戳 - 自适应位置到底部
      int time_y = screen_height - 15;
      it.strftime(margin, time_y, time_font, Color(255, 255, 0), "%m/%d %H:%M", id(ha_time).now());


