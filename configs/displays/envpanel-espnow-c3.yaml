# ========= ESP-NOW接收器 + 显示面板（ESP32-C3定制版）=========
substitutions:
  device_name: "envpanel-espnow-c3"
  friendly_name: "ESP-NOW-C3"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

api:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  - platform: esphome
    password: !secret ota_password

network:

espnow:
  id: espnow_component
  enable_on_boot: true
  channel: 1
  auto_add_peer: true
  on_broadcast:
    then:
      - lambda: |-
          ESP_LOGD("espnow", "Received ESP-NOW data");

          if (size < 12) {
            ESP_LOGW("espnow", "Payload too short: %u bytes", size);
            return;
          }

          float temp = NAN;
          float hum = NAN;
          float press = NAN;
          float tvoc = NAN;
          float formaldehyde = NAN;
          float co2 = NAN;

          memcpy(&temp, data, 4);
          memcpy(&hum, data + 4, 4);
          memcpy(&press, data + 8, 4);

          if (size >= 24) {
            memcpy(&tvoc, data + 12, 4);
            memcpy(&formaldehyde, data + 16, 4);
            memcpy(&co2, data + 20, 4);
          } else if (size > 12) {
            ESP_LOGW("espnow", "Unsupported payload length: %u bytes", size);
          }

          const bool base_valid =
              (temp > -50.0f && temp < 100.0f) &&
              (hum >= 0.0f && hum <= 100.0f) &&
              (press > 800.0f && press < 1200.0f);

          if (!base_valid) {
            ESP_LOGW("espnow", "Base payload validation failed: T=%.2f, H=%.2f, P=%.2f", temp, hum, press);
            return;
          }

          const bool tvoc_valid = !isnan(tvoc) && tvoc >= 0.0f && tvoc < 10.0f;
          const bool hcho_valid = !isnan(formaldehyde) && formaldehyde >= 0.0f && formaldehyde < 1.5f;
          const bool co2_valid = !isnan(co2) && co2 >= 200.0f && co2 < 10000.0f;

          id(received_temperature) = temp;
          id(received_humidity) = hum;
          id(received_pressure) = press;
          if (tvoc_valid) {
            id(received_tvoc) = tvoc;
          }
          if (hcho_valid) {
            id(received_formaldehyde) = formaldehyde;
          }
          if (co2_valid) {
            id(received_co2) = co2;
          }
          id(last_update_time) = millis();

          id(espnow_temperature).publish_state(temp);
          id(espnow_humidity).publish_state(hum);
          id(espnow_pressure).publish_state(press);
          if (tvoc_valid) {
            id(espnow_tvoc).publish_state(tvoc);
          }
          if (hcho_valid) {
            id(espnow_formaldehyde).publish_state(formaldehyde);
          }
          if (co2_valid) {
            id(espnow_co2).publish_state(co2);
          }

          ESP_LOGI("espnow", "Updated: T=%.1f°C, H=%.1f%%, P=%.1fhPa", temp, hum, press);
          if (tvoc_valid) {
            ESP_LOGI("espnow", "TVOC=%.3f mg/m³", tvoc);
          }
          if (hcho_valid) {
            ESP_LOGI("espnow", "甲醛=%.3f mg/m³", formaldehyde);
          }
          if (co2_valid) {
            ESP_LOGI("espnow", "CO₂=%.0f ppm", co2);
          }

globals:
  - id: received_temperature
    type: float
    initial_value: '0.0'
  - id: received_humidity
    type: float
    initial_value: '0.0'
  - id: received_pressure
    type: float
    initial_value: '0.0'
  - id: received_tvoc
    type: float
    initial_value: '0.0'
  - id: received_formaldehyde
    type: float
    initial_value: '0.0'
  - id: received_co2
    type: float
    initial_value: '0.0'
  - id: last_update_time
    type: unsigned long
    initial_value: '0'

packages:
  display9341: !include ../displays/display9341-espnow.yaml

sensor:
  - platform: template
    name: "ESP-NOW Temperature"
    id: espnow_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW Humidity"
    id: espnow_humidity
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW Pressure"
    id: espnow_pressure
    unit_of_measurement: "hPa"
    device_class: atmospheric_pressure
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW TVOC"
    id: espnow_tvoc
    unit_of_measurement: "mg/m³"
    device_class: volatile_organic_compounds
    state_class: measurement
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "ESP-NOW 甲醛"
    id: espnow_formaldehyde
    unit_of_measurement: "mg/m³"
    state_class: measurement
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "ESP-NOW CO₂"
    id: espnow_co2
    unit_of_measurement: "ppm"
    device_class: carbon_dioxide
    state_class: measurement
    accuracy_decimals: 0
    update_interval: never

binary_sensor:
  - platform: template
    name: "ESP-NOW Data Fresh"
    id: data_fresh
    lambda: |-
      if (id(last_update_time) == 0) return false;
      return (millis() - id(last_update_time)) < 600000;
    filters:
      - delayed_on: 1s
      - delayed_off: 5s

text_sensor:
  - platform: template
    name: "ESP-NOW Status"
    id: espnow_status
    lambda: |-
      if (id(last_update_time) == 0) return std::string("等待数据");
      unsigned long age = (millis() - id(last_update_time)) / 1000;
      if (age < 60) return std::string("数据最新");
      if (age < 600) return std::string("数据已有 " + to_string(age) + " 秒");
      return std::string("数据超时");
    update_interval: 10s



