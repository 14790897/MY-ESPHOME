# ========= ESP-NOW接收器 + 显示面板（ESP32-C3定制版）=========
substitutions:
  device_name: "envpanel-espnow-c3"
  friendly_name: "ESP-NOW-C3"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

api:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  - platform: esphome
    password: !secret ota_password

network:

# MQTT Configuration for IoT Platform
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: !secret mqtt_topic_prefix
  discovery: false
  on_connect:
    - lambda: |-
        ESP_LOGI("mqtt", "MQTT已连接到物联网平台");
        id(mqtt_response).publish_state("MQTT连接成功");
        id(mqtt_last_response_time) = millis();
  on_disconnect:
    - lambda: |-
        ESP_LOGW("mqtt", "MQTT连接断开");
        id(mqtt_response).publish_state("MQTT断开连接");
  on_message:
    - topic: !secret mqtt_topic_property_set
      then:
        - lambda: |-
            ESP_LOGI("mqtt", "收到MQTT属性设置: %s", x.c_str());
            id(mqtt_response).publish_state(x.c_str());
            id(mqtt_last_response_time) = millis();
    - topic: +/thing/property/post_reply
      then:
        - lambda: |-
            ESP_LOGI("mqtt", "收到属性上报响应: %s", x.c_str());
            id(mqtt_response).publish_state(("上报响应: " + x).c_str());
            id(mqtt_last_response_time) = millis();

espnow:
  id: espnow_component
  enable_on_boot: true
  channel: 1
  auto_add_peer: true
  on_broadcast:
    then:
      - lambda: |-
          ESP_LOGD("espnow", "Received ESP-NOW data (%u bytes)", size);

          if (size == 0) {
            ESP_LOGW("espnow", "Empty payload received");
            return;
          }

          if (data[0] == '{' && data[size - 1] == '}') {
            std::string json_payload(reinterpret_cast<const char *>(data), size);

            auto extract_float = [&](const char *field, float &out) -> bool {
              const std::string needle = std::string("\"") + field + "\"";
              size_t pos = json_payload.find(needle);
              if (pos == std::string::npos) {
                return false;
              }
              pos = json_payload.find(':', pos + needle.size());
              if (pos == std::string::npos) {
                return false;
              }
              const char *start = json_payload.c_str() + pos + 1;
              char *end = nullptr;
              out = strtof(start, &end);
              return start != end;
            };

            bool any_valid = false;

            float tvoc = NAN;
            if (extract_float("tvoc", tvoc)) {
              if (!isnan(tvoc) && tvoc >= 0.0f && tvoc < 10.0f) {
                id(received_tvoc) = tvoc;
                id(espnow_tvoc).publish_state(tvoc);
                any_valid = true;
                ESP_LOGI("espnow", "TVOC=%.3f mg/m³", tvoc);
              } else {
                ESP_LOGW("espnow", "TVOC value out of range: %.3f", tvoc);
              }
            }

            float formaldehyde = NAN;
            if (extract_float("formaldehyde", formaldehyde)) {
              if (!isnan(formaldehyde) && formaldehyde >= 0.0f && formaldehyde < 1.5f) {
                id(received_formaldehyde) = formaldehyde;
                id(espnow_formaldehyde).publish_state(formaldehyde);
                any_valid = true;
                ESP_LOGI("espnow", "甲醛=%.3f mg/m³", formaldehyde);
              } else {
                ESP_LOGW("espnow", "甲醛数值超出范围: %.3f", formaldehyde);
              }
            }

            float co2 = NAN;
            if (extract_float("co2", co2)) {
              if (!isnan(co2) && co2 >= 0.0f && co2 < 10000.0f) {
                id(received_co2) = co2;
                id(espnow_co2).publish_state(co2);
                any_valid = true;
                ESP_LOGI("espnow", "CO₂=%.3f", co2);
              } else {
                ESP_LOGW("espnow", "CO₂数值超出范围: %.3f", co2);
              }
            }

            if (any_valid) {
              const unsigned long now = millis();
              id(last_voc_update_time) = now;
              id(last_update_time) = now;
            } else {
              ESP_LOGW("espnow", "JSON payload did not contain valid VOC data");
            }
            return;
          }

          if (size < 12) {
            ESP_LOGW("espnow", "Payload too short: %u bytes", size);
            return;
          }

          float temp = NAN;
          float hum = NAN;
          float press = NAN;
          float tvoc = NAN;
          float formaldehyde = NAN;
          float co2 = NAN;

          memcpy(&temp, data, 4);
          memcpy(&hum, data + 4, 4);
          memcpy(&press, data + 8, 4);

          if (size >= 24) {
            memcpy(&tvoc, data + 12, 4);
            memcpy(&formaldehyde, data + 16, 4);
            memcpy(&co2, data + 20, 4);
          } else if (size > 12) {
            ESP_LOGW("espnow", "Unsupported payload length: %u bytes", size);
          }

          const bool base_valid =
              (temp > -50.0f && temp < 100.0f) &&
              (hum >= 0.0f && hum <= 100.0f) &&
              (press > 800.0f && press < 1200.0f);

          if (!base_valid) {
            ESP_LOGW("espnow", "Base payload validation failed: T=%.2f, H=%.2f, P=%.2f", temp, hum, press);
            return;
          }

          const bool tvoc_valid = !isnan(tvoc) && tvoc >= 0.0f && tvoc < 10.0f;
          const bool hcho_valid = !isnan(formaldehyde) && formaldehyde >= 0.0f && formaldehyde < 1.5f;
          const bool co2_valid = !isnan(co2) && co2 >= 200.0f && co2 < 10000.0f;

          id(received_temperature) = temp;
          id(received_humidity) = hum;
          id(received_pressure) = press;
          if (tvoc_valid) {
            id(received_tvoc) = tvoc;
          }
          if (hcho_valid) {
            id(received_formaldehyde) = formaldehyde;
          }
          if (co2_valid) {
            id(received_co2) = co2;
          }

          const unsigned long now = millis();
          id(last_env_update_time) = now;
          id(last_update_time) = now;

          id(espnow_temperature).publish_state(temp);
          id(espnow_humidity).publish_state(hum);
          id(espnow_pressure).publish_state(press);
          if (tvoc_valid) {
            id(espnow_tvoc).publish_state(tvoc);
          }
          if (hcho_valid) {
            id(espnow_formaldehyde).publish_state(formaldehyde);
          }
          if (co2_valid) {
            id(espnow_co2).publish_state(co2);
          }

          ESP_LOGI("espnow", "Updated: T=%.1f°C, H=%.1f%%, P=%.1fhPa", temp, hum, press);
          if (tvoc_valid) {
            ESP_LOGI("espnow", "TVOC=%.3f mg/m³", tvoc);
          }
          if (hcho_valid) {
            ESP_LOGI("espnow", "甲醛=%.3f mg/m³", formaldehyde);
          }
          if (co2_valid) {
            ESP_LOGI("espnow", "CO₂=%.0f ppm", co2);
          }
globals:
  - id: received_temperature
    type: float
    initial_value: '0.0'
  - id: received_humidity
    type: float
    initial_value: '0.0'
  - id: received_pressure
    type: float
    initial_value: '0.0'
  - id: received_tvoc
    type: float
    initial_value: '0.0'
  - id: received_formaldehyde
    type: float
    initial_value: '0.0'
  - id: received_co2
    type: float
    initial_value: '0.0'
  - id: last_env_update_time
    type: unsigned long
    initial_value: '0'
  - id: last_voc_update_time
    type: unsigned long
    initial_value: '0'
  - id: last_update_time
    type: unsigned long
    initial_value: '0'
  - id: mqtt_last_response_time
    type: unsigned long
    initial_value: '0'

# MQTT数据上传间隔配置
interval:
  - interval: 60s
    then:
      - lambda: |-
          // 检查数据是否有效
          if (id(last_update_time) == 0) {
            ESP_LOGW("mqtt", "没有可用数据，跳过MQTT上传");
            return;
          }
          
          // 检查数据是否过期（超过10分钟）
          unsigned long age = (millis() - id(last_update_time)) / 1000;
          if (age > 600) {
            ESP_LOGW("mqtt", "数据已过期 (%lu 秒)，跳过MQTT上传", age);
            return;
          }
          
          // 构建JSON数据
          char json_buffer[512];
          int len = snprintf(json_buffer, sizeof(json_buffer),
            "{"
            "\"id\":\"%lu\","
            "\"version\":\"1.0\","
            "\"params\":{"
              "\"temperature\":%.1f,"
              "\"humidity\":%.1f,"
              "\"pressure\":%.1f",
            millis(),
            id(received_temperature),
            id(received_humidity),
            id(received_pressure)
          );
          
          // 添加VOC数据（如果有效）
          if (!isnan(id(received_tvoc)) && id(received_tvoc) >= 0.0f && id(received_tvoc) < 10.0f) {
            len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
              ",\"tvoc\":%.3f", id(received_tvoc));
          }
          
          // 添加甲醛数据（如果有效）
          if (!isnan(id(received_formaldehyde)) && id(received_formaldehyde) >= 0.0f && id(received_formaldehyde) < 1.5f) {
            len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
              ",\"formaldehyde\":%.3f", id(received_formaldehyde));
          }
          
          // 添加CO2数据（如果有效）
          if (!isnan(id(received_co2)) && id(received_co2) >= 200.0f && id(received_co2) < 10000.0f) {
            len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
              ",\"co2\":%.1f", id(received_co2));
          }
          
          // 结束JSON
          snprintf(json_buffer + len, sizeof(json_buffer) - len, "}}");
          
          ESP_LOGI("mqtt", "上传数据到物联网平台: %s", json_buffer);
      - mqtt.publish:
          topic: !secret mqtt_topic_property_post
          payload: !lambda |-
            // 重新构建相同的JSON
            char json_buffer[512];
            int len = snprintf(json_buffer, sizeof(json_buffer),
              "{"
              "\"id\":\"%lu\","
              "\"version\":\"1.0\","
              "\"params\":{"
                "\"temperature\":%.1f,"
                "\"humidity\":%.1f,"
                "\"pressure\":%.1f",
              millis(),
              id(received_temperature),
              id(received_humidity),
              id(received_pressure)
            );
            
            if (!isnan(id(received_tvoc)) && id(received_tvoc) >= 0.0f && id(received_tvoc) < 10.0f) {
              len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
                ",\"tvoc\":%.3f", id(received_tvoc));
            }
            
            if (!isnan(id(received_formaldehyde)) && id(received_formaldehyde) >= 0.0f && id(received_formaldehyde) < 1.5f) {
              len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
                ",\"formaldehyde\":%.3f", id(received_formaldehyde));
            }
            
            if (!isnan(id(received_co2)) && id(received_co2) >= 200.0f && id(received_co2) < 10000.0f) {
              len += snprintf(json_buffer + len, sizeof(json_buffer) - len,
                ",\"co2\":%.1f", id(received_co2));
            }
            
            snprintf(json_buffer + len, sizeof(json_buffer) - len, "}}");
            return std::string(json_buffer);

packages:
  display9341: !include ../displays/display9341-espnow.yaml

sensor:
  - platform: template
    name: "ESP-NOW Temperature"
    id: espnow_temperature
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW Humidity"
    id: espnow_humidity
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW Pressure"
    id: espnow_pressure
    unit_of_measurement: "hPa"
    device_class: atmospheric_pressure
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "ESP-NOW TVOC"
    id: espnow_tvoc
    unit_of_measurement: "mg/m³"
    device_class: volatile_organic_compounds
    state_class: measurement
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "ESP-NOW 甲醛"
    id: espnow_formaldehyde
    unit_of_measurement: "mg/m³"
    state_class: measurement
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: "ESP-NOW CO₂"
    id: espnow_co2
    unit_of_measurement: "ppm"
    device_class: carbon_dioxide
    state_class: measurement
    accuracy_decimals: 0
    update_interval: never

binary_sensor:
  - platform: template
    name: "ESP-NOW Data Fresh"
    id: data_fresh
    lambda: |-
      if (id(last_update_time) == 0) return false;
      return (millis() - id(last_update_time)) < 600000;
    filters:
      - delayed_on: 1s
      - delayed_off: 5s

text_sensor:
  - platform: template
    name: "ESP-NOW Status"
    id: espnow_status
    lambda: |-
      if (id(last_update_time) == 0) return std::string("等待数据");
      unsigned long age = (millis() - id(last_update_time)) / 1000;
      if (age < 60) return std::string("数据最新");
      if (age < 600) return std::string("数据已有 " + to_string(age) + " 秒");
      return std::string("数据超时");
    update_interval: 10s

  - platform: template
    name: "MQTT Response"
    id: mqtt_response
    icon: "mdi:message-reply-text"

  - platform: template
    name: "MQTT Status"
    id: mqtt_status
    icon: "mdi:cloud-check"
    lambda: |-
      if (id(mqtt_last_response_time) == 0) {
        return std::string("等待响应");
      }
      unsigned long age = (millis() - id(mqtt_last_response_time)) / 1000;
      if (age < 120) {
        return std::string("已连接");
      } else if (age < 600) {
        return std::string("响应延迟 " + to_string(age) + " 秒");
      } else {
        return std::string("响应超时");
      }
    update_interval: 10s



