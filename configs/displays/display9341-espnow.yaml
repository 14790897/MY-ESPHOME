# ========= ILI9341 显示屏（SPI，ESP-NOW版本）=========

spi:
  clk_pin: GPIO2
  mosi_pin: GPIO3

font:
  - file: "../../resources/static/NotoSansSC-Regular.ttf"
    id: font_xs
    size: 12
    bpp: 1
    glyphs: "0123456789.%°Cmg/hPa³TVO甲醛环境监测传感器数据在线离温湿气压更新秒前已有超时:- p"
  - file: "../../resources/static/NotoSansSC-Regular.ttf"
    id: font_s
    size: 16
    bpp: 1
    glyphs: "环境监测ESP-NOW在线离传感器数据温湿气压甲醛TVC2更新秒前已有超时: pm"
  - file: "../../resources/static/NotoSansSC-Regular.ttf"
    id: font_m
    size: 18
    bpp: 1
    glyphs: "0123456789.%°Cmg/hPa³TVO甲醛温湿气压: p"

output:
  - platform: ledc
    pin: GPIO21
    id: lcd_bl_out
    frequency: 5000 Hz

light:
  - platform: monochromatic
    name: "LCD Backlight"
    id: lcd_backlight
    output: lcd_bl_out
    default_transition_length: 0.5s
    restore_mode: RESTORE_DEFAULT_ON
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 2s
          update_interval: 2s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s

display:
  - platform: mipi_spi
    model: ILI9341
    cs_pin: GPIO7
    dc_pin: GPIO6
    reset_pin: GPIO10
    data_rate: 10MHz
    rotation: 0
    invert_colors: false
    dimensions: 240x320
    lambda: |-
      it.fill(Color::BLACK);
      const int screen_height = it.get_height();

      auto title_font = id(font_m);
      auto section_font = id(font_s);
      auto data_font = id(font_m);
      auto time_font = id(font_xs);

      int line_spacing = 22;
      int section_spacing = 28;
      int margin = 12;

      if (screen_height < 240) {
        title_font = id(font_m);
        data_font = id(font_s);
        section_font = id(font_xs);
        line_spacing = 18;
        section_spacing = 22;
        margin = 8;
      }

      int y_pos = margin;

      it.print(margin, y_pos, title_font, Color::WHITE, "环境监测");
      y_pos += section_spacing;

      const bool data_fresh = (millis() - id(last_update_time)) < 60000;
      if (data_fresh) {
        it.print(margin, y_pos, section_font, Color(0, 255, 0), "ESP-NOW: 在线");
      } else {
        it.print(margin, y_pos, section_font, Color(255, 0, 0), "ESP-NOW: 离线");
      }
      y_pos += line_spacing;

      it.print(margin, y_pos, section_font, Color(200, 200, 200), "传感器数据");
      y_pos += line_spacing;

      if (id(espnow_temperature).has_state()) {
        const float temp = id(espnow_temperature).state;
        Color temp_color;
        if (temp < 16.0f || temp > 30.0f) {
          temp_color = Color(255, 0, 0);
        } else if (temp < 18.0f || temp > 26.0f) {
          temp_color = Color(255, 215, 0);
        } else {
          temp_color = Color(0, 255, 0);
        }
        it.printf(margin + 10, y_pos, data_font, temp_color, "温度: %.1f°C", temp);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "温度: --");
      }
      y_pos += line_spacing;

      if (id(espnow_humidity).has_state()) {
        const float humidity = id(espnow_humidity).state;
        Color humidity_color;
        if (humidity < 30.0f || humidity > 70.0f) {
          humidity_color = Color(255, 0, 0);
        } else if (humidity < 40.0f || humidity > 60.0f) {
          humidity_color = Color(255, 215, 0);
        } else {
          humidity_color = Color(0, 255, 0);
        }
        it.printf(margin + 10, y_pos, data_font, humidity_color, "湿度: %.1f%%", humidity);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "湿度: --");
      }
      y_pos += line_spacing;

      if (id(espnow_pressure).has_state()) {
        const float pressure = id(espnow_pressure).state;
        Color pressure_color;
        if (pressure < 950.0f || pressure > 1050.0f) {
          pressure_color = Color(255, 215, 0);
        } else {
          pressure_color = Color(0, 255, 255);
        }
        it.printf(margin + 10, y_pos, data_font, pressure_color, "气压: %.1f hPa", pressure);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "气压: --");
      }
      y_pos += line_spacing;

      if (id(espnow_tvoc).has_state()) {
        const float tvoc = id(espnow_tvoc).state;
        Color tvoc_color;
        if (tvoc < 0.3f) {
          tvoc_color = Color(0, 255, 0);
        } else if (tvoc < 0.6f) {
          tvoc_color = Color(255, 215, 0);
        } else {
          tvoc_color = Color(255, 0, 0);
        }
        it.printf(margin + 10, y_pos, data_font, tvoc_color, "TVOC: %.3f mg/m³", tvoc);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "TVOC: --");
      }
      y_pos += line_spacing;

      if (id(espnow_formaldehyde).has_state()) {
        const float hcho = id(espnow_formaldehyde).state;
        Color hcho_color;
        if (hcho < 0.08f) {
          hcho_color = Color(0, 255, 0);
        } else if (hcho < 0.10f) {
          hcho_color = Color(255, 215, 0);
        } else {
          hcho_color = Color(255, 0, 0);
        }
        it.printf(margin + 10, y_pos, data_font, hcho_color, "甲醛: %.3f mg/m³", hcho);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "甲醛: --");
      }
      y_pos += line_spacing;

      if (id(espnow_co2).has_state()) {
        const float co2 = id(espnow_co2).state;
        Color co2_color;
        if (co2 < 1000.0f) {
          co2_color = Color(0, 255, 0);
        } else if (co2 < 1500.0f) {
          co2_color = Color(255, 215, 0);
        } else {
          co2_color = Color(255, 0, 0);
        }
        it.printf(margin + 10, y_pos, data_font, co2_color, "CO2: %.0f ppm", co2);
      } else {
        it.print(margin + 10, y_pos, data_font, Color(255, 0, 0), "CO2: --");
      }
      y_pos += section_spacing;

      if (data_fresh) {
        const unsigned long seconds_ago = (millis() - id(last_update_time)) / 1000;
        it.printf(margin, y_pos, time_font, Color(200, 200, 200), "更新: %lus 前", seconds_ago);
      } else {
        it.print(margin, y_pos, time_font, Color(255, 0, 0), "数据超时");
      }

      const int time_y = screen_height - 15;
      it.strftime(margin, time_y, time_font, Color(255, 255, 0), "%m/%d %H:%M", id(ha_time).now());

time:
  - platform: homeassistant
    id: ha_time
    timezone: Asia/Shanghai



