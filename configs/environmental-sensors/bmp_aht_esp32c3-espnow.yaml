esphome:
  name: bmp-aht-esp32c3-espnow
  friendly_name: ESP-NOW Env Sender (AHT20 + BMP280)

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

# WiFi配置
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # WiFi连接失败时的处理
  ap:
    ssid: "ESP32C3-bmp Fallback Hotspot"
    password: "12345678"

# OTA配置 - 支持远程更新
ota:
  platform: esphome
api:

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a
  # frequency: 50kHz      # 先降到 50kHz，确认稳定后再提速

# 全局变量用于在action间传递传感器数据
globals:
  - id: temp_for_send
    type: float
    restore_value: false
    initial_value: '0.0'
  - id: hum_for_send
    type: float
    restore_value: false
    initial_value: '0.0'
  - id: press_for_send
    type: float
    restore_value: false
    initial_value: '0.0'

# ESP-NOW配置 - 基于源码的标准格式
espnow:
  id: espnow_component
  enable_on_boot: true
  channel: 1  # WiFi信道，必须与接收端一致
  # 自动添加peer模式
  auto_add_peer: true

# 定时发送数据的间隔配置
interval:
  - interval: 30s  # 每30秒发送一次数据
    then:
      - lambda: |-
          // 构造要发送的数据包
          float temp = id(aht20_temperature).state;
          float hum = id(aht20_humidity).state;
          float press = id(bmp280_pressure).state;
          
          // 调试：显示原始传感器值
          ESP_LOGD("espnow", "传感器原始值: 温度=%.2f, 湿度=%.2f, 气压=%.2f", temp, hum, press);
          ESP_LOGD("espnow", "传感器状态: 温度=%s, 湿度=%s, 气压=%s", 
                   std::isnan(temp) ? "无效" : "有效",
                   std::isnan(hum) ? "无效" : "有效", 
                   std::isnan(press) ? "无效" : "有效");
          
          // 检查关键传感器数据有效性 (温湿度必须有效，气压可选)
          if (std::isnan(temp) || std::isnan(hum)) {
            ESP_LOGW("espnow", "温湿度传感器数据无效，跳过发送");
          }else {
          // 准备数据用于发送
          id(temp_for_send) = temp;
          id(hum_for_send) = hum;
          }
          
          // 如果气压传感器无效，使用默认值
          if (std::isnan(press)) {
            ESP_LOGW("espnow", "气压传感器无效，跳过发送");
          }else {
            id(press_for_send) = press;
          } 
          
      # 使用官方推荐的espnow.broadcast action
      - espnow.broadcast:
          id: espnow_component
          data: !lambda |-
            // 打包数据：温度(4字节) + 湿度(4字节) + 气压(4字节)
            std::vector<uint8_t> data(12);
            float temp = id(temp_for_send);
            float hum = id(hum_for_send);
            float press = id(press_for_send);
            memcpy(&data[0], &temp, 4);
            memcpy(&data[4], &hum, 4);  
            memcpy(&data[8], &press, 4);
            ESP_LOGI("espnow", "广播发送: 温度=%.1f°C, 湿度=%.1f%%, 气压=%.1fhPa", temp, hum, press);
            return data;

sensor:
  # AHT20 Temperature and Humidity Sensor (Fixed address 0x38)
  - platform: aht10
    i2c_id: bus_a
    setup_priority: -100   # 延后初始化，等上面的 on_boot 延时跑完
    temperature:
      name: "AHT20 Temperature"
      id: aht20_temperature
    humidity:
      name: "AHT20 Humidity"
      id: aht20_humidity
    variant: AHT20
    update_interval: 30s

  # BMP280 Pressure Sensor
  - platform: bmp280_i2c
    temperature:
      name: "BMP280 Temperature"
      id: bmp280_temperature
    pressure:
      name: "BMP280 Pressure"
      id: bmp280_pressure
    address: 0x77
    i2c_id: bus_a
    update_interval: 30s


external_components:
  - source:
      type: local
      path: ../../common_components