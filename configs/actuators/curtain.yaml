esphome:
  name: stepper-a4988
  friendly_name: Curtain Controller
  on_boot:
    priority: -100  # 在所有组件初始化后执行
    then:
      - delay: 2s  # 等待stepper初始化完成
      - stepper.report_position:  # 恢复保存的位置
          id: curtain_motor
          position: !lambda "return id(saved_position);"

deep_sleep:
  id: deep_sleep_control

# 脚本：动态设置休眠时间
script:
  - id: enter_sleep_with_duration
    then:
      - lambda: |-
          int duration_ms = id(sleep_duration_minutes) * 60 * 1000;
          ESP_LOGI("sleep", "Entering deep sleep for %d minutes", id(sleep_duration_minutes));
          id(deep_sleep_control).set_sleep_duration(duration_ms);
      - deep_sleep.enter:
          id: deep_sleep_control

esp32:
  variant: esp32c3
  framework:
   type: esp-idf
logger:
  level: DEBUG

# 时间同步配置（用于定时休眠）
time:
  - platform: sntp
    id: homeassistant_time
    timezone: Asia/Shanghai
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

    # 晚上 23 进入“夜间睡眠”，一直睡到次日 07:00
    on_time:
      - hours: 23
        minutes: 0
        seconds: 0
        then:
          - lambda: |-
              auto now = id(homeassistant_time).now();
              if (!now.is_valid()) {
                ESP_LOGW("sleep", "Time not synced, skip night-sleep trigger.");
                return;
              }
              if (id(curtain_motor).target_position != id(curtain_motor).current_position) {
                ESP_LOGW("sleep", "Motor is moving, skip night sleep.");
                return;
              }
              // 计算从当前时刻到“次日 07:00”的分钟数
              const int target_h = 7;
              const int target_m = 0;
              int now_min = now.hour * 60 + now.minute;
              int target_min = target_h * 60 + target_m;
              int delta_min = (target_min - now_min + 24 * 60) % (24 * 60);
              if (delta_min == 0) delta_min = 24 * 60;  // 恰好卡点时睡满 24h 的兜底
              id(sleep_duration_minutes) = delta_min;
              ESP_LOGI("sleep", "Night sleep scheduled: %d minutes until %02d:%02d",
                       delta_min, target_h, target_m);
          - script.execute: enter_sleep_with_duration

api:

sensor:
  - platform: template
    name: "Curtain Current Position (steps)"
    lambda: |-
      // 使用ESPHome内置的current_position方法
      return id(curtain_motor).current_position;
    update_interval: 10s
ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# 全局变量用于存储位置到Flash
globals:
  - id: saved_position
    type: int
    restore_value: true  # 保存到Flash，重启后恢复
    initial_value: '0'
  
  # 深度休眠功能配置
  - id: sleep_duration_minutes
    type: int
    restore_value: true
    initial_value: '60'    # 默认休眠60分钟
  
  - id: sleep_enabled
    type: bool
    restore_value: true
    initial_value: 'false'  # 默认不启用自动休眠


# -------------------- 步进电机本体 --------------------
stepper:
  - platform: a4988
    id: curtain_motor
    step_pin: GPIO4            # ← STEP
    dir_pin:                   # ← DIR（高/低决定方向）
      number: GPIO5
      inverted: true           # 添加此行以反转旋转方向
    sleep_pin:                 # ← A4988的SLEEP pin（低电平有效）
      number: GPIO3
      inverted: true
    max_speed: 250 steps/s     # 根据文档建议，大多数步进电机不能超过250 steps/s
    acceleration: 800 steps/s^2
    deceleration: 800 steps/s^2

# -------------------- 限位（可选） --------------------
binary_sensor:
  - platform: gpio
    id: home_sw
    name: "Curtain Limit Switch"
    pin:
      number: GPIO10          # ← 接常闭或常开都行，下面做了防抖和极性处理
      mode:
        input: true
        pullup: true
      inverted: true           # 常开对地时可设 true
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        # 停止电机：设置目标位置为当前位置
        - stepper.set_target:
            id: curtain_motor
            target: !lambda "return id(curtain_motor).current_position;"
        - stepper.report_position:    # 把当前位置标记为0（回零完成）
            id: curtain_motor
            position: 0
        - globals.set:  # 保存位置到Flash
            id: saved_position
            value: '0'

  - platform: template
    name: "Deep Sleep Status"
    id: deep_sleep_status
    lambda: |-
      return id(sleep_enabled);

# -------------------- 控制UI（HA里会出现实体） --------------------
button:
  - platform: template
    name: "Curtain Stop"
    on_press:
      then:
        # ESPHome stepper没有stop action，通过设置目标位置为当前位置来停止
        - stepper.set_target:
            id: curtain_motor
            target: !lambda "return id(curtain_motor).current_position;"
        - globals.set:  # 保存当前位置到Flash
            id: saved_position
            value: !lambda "return id(curtain_motor).current_position;"

  - platform: template
    name: "Curtain Fully Closed (Absolute -10000 steps)"
    on_press:
      then:
        # 移动到负方向的远端位置，触发限位开关
        - stepper.set_target:
            id: curtain_motor
            target: -10000  # 移动到足够远的负位置

  - platform: template
    name: "Curtain Fully Open (Absolute 10000 steps)"
    on_press:
      then:
        - stepper.set_target:
            id: curtain_motor
            target: 10000  # 绝对位置10000步

  - platform: template
    name: "Curtain Open (Relative +5000 steps)"
    on_press:
      then:
        - stepper.report_position:  # 重置为0以便相对移动
            id: curtain_motor
            position: 0
        - stepper.set_target:
            id: curtain_motor
            target: 5000  # 相对移动5000步
        - globals.set:  # 保存新位置到Flash
            id: saved_position
            value: !lambda "return id(saved_position) + 5000;"

  - platform: template
    name: "Curtain Close (Relative -5000 steps)"
    on_press:
      then:
        - stepper.report_position:  # 重置为0以便相对移动
            id: curtain_motor
            position: 0
        - stepper.set_target:
            id: curtain_motor
            target: -5000  # 相对移动-5000步
        - globals.set:  # 保存新位置到Flash
            id: saved_position
            value: !lambda "return id(saved_position) - 5000;"

  # 深度休眠控制按钮
  - platform: template
    name: "Enter Deep Sleep"
    on_press:
      then:
        - script.execute: enter_sleep_with_duration


number:
  - platform: template
    name: "Curtain Target Position (steps)"
    min_value: -50000
    max_value:  50000
    step: 100
    mode: box
    set_action:
      then:
        - stepper.set_target:
            id: curtain_motor
            target: !lambda "return (int) x;"
        - globals.set:  # 保存目标位置到Flash
            id: saved_position
            value: !lambda "return (int) x;"

  # 深度休眠时间配置
  - platform: template
    name: "Sleep Duration (Minutes)"
    id: sleep_duration_config
    min_value: 5
    max_value: 480  # 最长8小时
    step: 5
    mode: box
    lambda: "return id(sleep_duration_minutes);"
    set_action:
      then:
        - globals.set:
            id: sleep_duration_minutes
            value: !lambda "return (int) x;"

# -------------------- 深度休眠功能 --------------------
switch:
  - platform: template
    name: "Auto Sleep Mode"
    id: auto_sleep_switch
    lambda: "return id(sleep_enabled);"
    turn_on_action:
      - globals.set:
          id: sleep_enabled
          value: 'true'
      - logger.log: "Auto sleep mode enabled"
    turn_off_action:
      - globals.set:
          id: sleep_enabled
          value: 'false'
      - logger.log: "Auto sleep mode disabled"

# 定时休眠检查
interval:
  - interval: 30s  # 每30秒检查一次
    then:
      - if:
          condition:
            and:
              - lambda: 'return id(sleep_enabled);'
              - lambda: 'return millis() > 300000;'  # 运行超过5分钟后才允许休眠
          then:
            - logger.log: "Auto sleep triggered"
            - script.execute: enter_sleep_with_duration