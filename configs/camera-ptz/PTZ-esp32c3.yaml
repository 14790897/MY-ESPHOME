esphome:
  name: ptz-esp32c3
  friendly_name: "Camera PTZ Controller"

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

# === Angle "readback" (for display) ===
sensor:
  - platform: template
    name: "Pan Current Position"
    id: pan_feedback
    unit_of_measurement: "°"
    update_interval: never
    lambda: 'return id(pan_angle).state;'
  - platform: template
    name: "Tilt Current Position"
    id: tilt_feedback
    unit_of_measurement: "°"
    update_interval: never
    lambda: 'return id(tilt_angle).state;'

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "PTZ-ESP32C3 Fallback Hotspot"
    password: "12345678"

captive_portal:

web_server:
  port: 80

api:

ota:
  platform: esphome

logger:
  level: DEBUG
  logs:
    wifi: DEBUG
    api: DEBUG

# === Two PWM outputs: Pan / Tilt ===
output:
  - platform: ledc
    id: pan_servo_pwm
    pin: GPIO8        # ← Modify according to actual wiring
    frequency: 100Hz   # Servo common 50Hz
  - platform: ledc
    id: tilt_servo_pwm
    pin: GPIO9        # ← Modify according to actual wiring
    frequency: 100Hz

# === Two servos: Pan / Tilt ===
servo:
  - id: pan_servo
    output: pan_servo_pwm
    auto_detach_time: 2s
    min_level: 0%     # Common pulse width mapping (fine-tune for your servo)
    max_level: 25%
  - id: tilt_servo
    output: tilt_servo_pwm
    auto_detach_time: 2s
    min_level: 0%
    max_level: 25%

# === PTZ angle control (0~180°) ===
number:
  - platform: template
    name: "Pan Angle"
    id: pan_angle
    min_value: 0
    max_value: 180
    step: 1
    initial_value: 90        # Horizontal center
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: pan_servo
            level: !lambda 'return x / 180.0;'
        - component.update: pan_feedback
  - platform: template
    name: "Tilt Angle"
    id: tilt_angle
    min_value: 0
    max_value: 180
    step: 1
    initial_value: 90        # Pitch center
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: tilt_servo
            level: !lambda 'return x / 180.0;'
        - component.update: tilt_feedback

# === Preset buttons ===
button:
  # Center
  - platform: template
    name: "PTZ Center"
    id: gimbal_center_btn
    icon: mdi:crosshairs-gps
    on_press:
      then:
        - number.set: { id: pan_angle, value: 90 }
        - number.set: { id: tilt_angle, value: 90 }

  # Auto scan (pan sweep back and forth)
  - platform: template
    name: "Start Scan"
    id: scan_start_btn
    icon: mdi:animation-play
    on_press:
      then:
        - script.execute: pan_sweep
  - platform: template
    name: "Stop Scan"
    id: scan_stop_btn
    icon: mdi:animation
    on_press:
      then:
        - script.stop: pan_sweep

# === Scan script (Pan sweeps between left and right limits) ===
script:
  - id: pan_sweep
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return true;'
          then:
            - number.set: { id: pan_angle, value: 30 }
            - delay: 1s
            - number.set: { id: pan_angle, value: 150 }
            - delay: 1s

