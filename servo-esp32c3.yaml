esphome:
  name: door-opener-esp32c3
  friendly_name: "门锁控制器"
  
esp32:
  board: airm2m_core_esp32c3
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Low power WiFi settings
  # power_save_mode: NONE  # Disable power saving mode for improved connection stability
  # # Fast connect to reduce wake-up time
  # fast_connect: false

api:

ota:
  platform: esphome

time:
  - platform: homeassistant
    id: ha_time
    on_time:
      - seconds: 0
        minutes: 0
        hours: 22
        then:
          - logger.log: "Entering night deep sleep"
          - deep_sleep.enter:
              id: deep_sleep_control
              sleep_duration: 10h

deep_sleep:
  id: deep_sleep_control


logger:
  level: DEBUG  # Increased to DEBUG level for easier troubleshooting
  logs:
    wifi: DEBUG
    api: DEBUG
    deep_sleep: INFO

# PWM output configuration
output:
  - platform: ledc
    id: door_servo_pwm
    pin: GPIO2            
    frequency: 100Hz

# Door servo control configuration
servo:
  - id: door_servo
    output: door_servo_pwm
    auto_detach_time: 2s    # Auto disconnect after 2s to ensure door operation completion
    min_level: 0%       
    max_level: 25%      

# Door control
number:
  - platform: template
    name: "door_angle"
    id: door_angle
    min_value: 0
    max_value: 180
    step: 1
    initial_value: 180  # Default closed position (180 degrees)
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: door_servo
            level: !lambda 'return x / 180.0;'
        # 手动触发sensor更新
        - component.update: uptime_sensor
        - component.update: door_position_feedback

# Free angle setter
  - platform: template
    name: "free_angle_control"
    id: free_angle_control
    min_value: 0
    max_value: 180
    step: 5  # 5 degree steps for precise control
    initial_value: 90  # Default middle position
    optimistic: true
    icon: "mdi:rotate-orbit"
    set_action:
      then:
        - logger.log: "Setting free angle"
        - servo.write:
            id: door_servo
            level: !lambda 'return x / 180.0;'
        - number.set:
            id: door_angle
            value: !lambda 'return x;'
        # 手动触发sensor更新
        - component.update: uptime_sensor
        - component.update: door_position_feedback

# Door preset operations
button:
  - platform: template
    name: "door_open"
    id: door_open_btn
    icon: "mdi:door-open"
    on_press:
      then:
        - logger.log: "Executing door open operation - Set to 0 degrees"
        - servo.write:
            id: door_servo
            level: 0.0  # 0 degrees, fully open
        - number.set:
            id: door_angle
            value: 0
        # Manually trigger sensor update
        - component.update: uptime_sensor
        - component.update: door_position_feedback
        # Wait 3 seconds after opening, then auto close
        - delay: 3s
        - logger.log: "Auto close - Set to 180 degrees"
        - servo.write:
            id: door_servo
            level: 1.0  # 180 degrees, closed position
        - number.set:
            id: door_angle
            value: 180
        # Update sensor again after closing
        - component.update: uptime_sensor
        - component.update: door_position_feedback
        - delay: 2s
        
  - platform: template
    name: "door_close"
    id: door_close_btn
    icon: "mdi:door-closed-lock"
    on_press:
      then:
        - logger.log: "Executing door close operation - Set to 180 degrees"
        - servo.write:
            id: door_servo
            level: 1.0  # 180 degrees, closed position
        - number.set:
            id: door_angle
            value: 180
        # Manually trigger sensor update
        - component.update: uptime_sensor
        - component.update: door_position_feedback
        - delay: 2s
        
  - platform: template
    name: "unlock_position"
    id: door_unlock_btn
    icon: "mdi:lock-open"
    on_press:
      then:
        - logger.log: "Move to unlock position - Set to 0 degrees"
        - servo.write:
            id: door_servo
            level: 0.0  
        - number.set:
            id: door_angle
            value: 0
        # Manually trigger sensor update
        - component.update: uptime_sensor
        - component.update: door_position_feedback
        - delay: 2s

# Add test button for debugging servo range
  - platform: template
    name: "test_90_degree"
    id: test_90_btn
    on_press:
      then:
        - logger.log: "Testing 90 degree position"
        - servo.write:
            id: door_servo
            level: 0.5  # 90 degrees, middle position
        - number.set:
            id: door_angle
            value: 90
        - number.set:
            id: free_angle_control
            value: 90
        # Manually trigger sensor update
        - component.update: uptime_sensor
        - component.update: door_position_feedback


# Power and door lock status sensors
sensor:
  - platform: template
    name: "uptime"
    id: uptime_sensor
    unit_of_measurement: "s"
    update_interval: never  # Changed to manual trigger, no auto reporting
    lambda: 'return millis() / 1000.0;'
    
  - platform: template
    name: "door_angle_feedback"
    id: door_position_feedback
    unit_of_measurement: "°"
    update_interval: never  # Changed to manual trigger, no auto reporting
    lambda: 'return id(door_angle).state;'




# （可选）同时做 HA 蓝牙代理
bluetooth_proxy:
  active: true

# —— 防抖/冷却计时，避免重复开门 —— 
globals:
  - id: last_open_ms
    type: uint32_t
    restore_value: no
    initial_value: '0'

esp32_ble_tracker:
  on_ble_advertise:
    - then:
        - lambda: |-
            const int RSSI_THRESHOLD   = -85;      // 先放宽，调通后再收紧
            const uint32_t COOLDOWN_MS = 5000;
            const char *ALLOW_UUID = "E2C56DB5DFFB48D2B060D0F5A71096E0";

            auto ib = x.get_ibeacon();
            if (!ib.has_value()) return;

            int rssi = x.get_rssi();
            if (rssi <= RSSI_THRESHOLD) { ESP_LOGD("ble_open", "weak rssi=%d", rssi); return; }

            std::string u = ib->get_uuid().to_string();
            std::string u2; u2.reserve(32);
            for (char c : u) if (c!='-') u2.push_back(::toupper(c));
            if (u2 != ALLOW_UUID) { ESP_LOGD("ble_open", "uuid mismatch: %s", u.c_str()); return; }

            uint16_t minor_pin = ib->get_minor();
            ESP_LOGI("ble_open", "hit: rssi=%d minor=%u", rssi, minor_pin);

            bool pin_ok = (minor_pin == 1111 || minor_pin == 2222 || minor_pin == 3344);
            if (!pin_ok) return;

            static uint32_t last = 0;
            uint32_t now = millis();
            if (now - last < COOLDOWN_MS) return;
            last = now;

            id(door_open_btn).press();

